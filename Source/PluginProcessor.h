/*
  ==============================================================================

  LowPassFilter - A low-pass filter VST Plugin

  Edward Storey

  A low-pass filter VST plugin written using the JUCE and VST SDK 2.4 frameworks. Based
  on the filter algorithm found in DAFX - Digital Audio Effects, U. Zolzer. .

  Much of the code here is auto-generated by Projucer, for PluginProcessor.h all lines
  betwen "void calculateCoefficients();" and "int windowSize = 0;" were added to the 
  auto-generated header file.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"


//==============================================================================
/**
*/
class LowPassFilterAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    LowPassFilterAudioProcessor();
    ~LowPassFilterAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

   #ifndef JucePlugin_PreferredChannelConfigurations
    bool setPreferredBusArrangement (bool isInput, int bus, const AudioChannelSet& preferredSet) override;
   #endif

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

	//==============================================================================

	void calculateCoefficients();
	void resizeBuffers(AudioSampleBuffer& buffer);

	//==============================================================================

	//Initialise processing buffers
	AudioSampleBuffer filterBufferL;
	AudioSampleBuffer filterBufferR;
	AudioSampleBuffer unfilterBufferL;
	AudioSampleBuffer unfilterBufferR;

	// Define pointers for reading and writing to the processing buffers 
	float* filterBufferLwp = {};
	float* filterBufferRwp = {};
	float* unfilterBufferLwp = {};
	float* unfilterBufferRwp = {};

	const float *filterBufferLrp;
	const float *filterBufferRrp;
	const float *unfilterBufferLrp;
	const float *unfilterBufferRrp;

	// Define variables for use in processBlock in PluginProcessor.cpp
	float QFactor, Frequency, QCheck, FreqCheck;
	float b0, b1, b2, a0, a1;
    
	// Initialising FS and windowSize to 0 ensure that the filter coeficients
	// and buffer sizes are calculated the first time processBlock is called.
	int FS = 0;
	
	int bidx = 0;

	int windowSize = 0;

private:
    //==============================================================================

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (LowPassFilterAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
