/*
  ==============================================================================

     LowPassFilter - A low-pass filter VST Plugin

     Edward Storey

     A low-pass filter VST plugin written using the JUCE and VST SDK 2.4 frameworks. Based
     on the filter algorithm found in DAFX - Digital Audio Effects, U. Zolzer. .

	 Much of the code here is auto-generated by Projucer. For PluginEditor.cpp all fucntions
	 have been auto-generated, however the content of each function has been heavily edited.
	 All lines of code within each function are original.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
LowPassFilterAudioProcessorEditor::LowPassFilterAudioProcessorEditor (LowPassFilterAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
	// Define all aspects of the Q Factor slider object.
	// This slider is placed horizonatlly with a range of -24 dB to +6 dB
	// The values are arranged along the slider linearly
	QFactorSlider.setSliderStyle(Slider::LinearHorizontal);
	QFactorSlider.setRange(0.01, 4.0, 0.01);
	QFactorSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::TextBoxLeft, false, 120, 20);
	QFactorSlider.setPopupDisplayEnabled(false, this);
	QFactorSlider.setTextValueSuffix(" Q Factor");
	QFactorSlider.setValue(2.0);

	addAndMakeVisible(&QFactorSlider);

	QFactorSlider.addListener(this);

	// Define all aspects of the Frequency slider object.
	// This slider is placed horizonatlly with a range of 20 Hz to 20,000 Hz
	// The values are arranged along the slider logarithmically
	FrequencySlider.setSliderStyle(Slider::LinearHorizontal);
	FrequencySlider.setRange(20.0, 20000.0, 0.1);
	FrequencySlider.setSkewFactorFromMidPoint(3000.0);
	FrequencySlider.setTextBoxStyle(Slider::TextEntryBoxPosition::TextBoxLeft, false, 120, 20);
	FrequencySlider.setPopupDisplayEnabled(false, this);
	FrequencySlider.setTextValueSuffix(" (Hz) Frequency");
	FrequencySlider.setValue(500.0);

	addAndMakeVisible(&FrequencySlider);

	FrequencySlider.addListener(this);

	// Set the size of the window
    setSize (600, 150);
}

LowPassFilterAudioProcessorEditor::~LowPassFilterAudioProcessorEditor()
{
}

void LowPassFilterAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
	// Update QFactor and Frequency variables whenever slider values change
	processor.QFactor = QFactorSlider.getValue();
	processor.Frequency = FrequencySlider.getValue();
}

//==============================================================================
void LowPassFilterAudioProcessorEditor::paint (Graphics& g)
{
	// Set plugin window colours and Fonts
    g.fillAll (Colours::lightblue);
    g.setColour (Colours::black);
    g.setFont (15.0f);
}

void LowPassFilterAudioProcessorEditor::resized()
{
	// Set slider sizes
	QFactorSlider.setBounds(10, 10, getWidth() - 30, 60);
	FrequencySlider.setBounds(10, 70, getWidth() - 30, 60);
}
